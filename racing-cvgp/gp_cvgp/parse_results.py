import numpy as np

def read_until_line_starts_with(inp, line):
    l = inp.readline()
    while l != "" and not l.startswith(line):
        #print('ll=', l)
        l = inp.readline()
    return l

def parse_gp_file(filename):
    #print('filename=', filename)
    inp = open(filename, 'r')
    l = read_until_line_starts_with(inp, 'final hof')
    #print('l=', l)
    rs = []
    l = read_until_line_starts_with(inp, 'validate r=')
    while l != "":
        #print('l=', l)
        tt = l[:-1].split()
        rs.append(-float(tt[2]))
        l = read_until_line_starts_with(inp, 'validate r=')
    inp.close()
    if len(rs) > 0:
        r = min(rs)
    else:
        r = -1.
    return r

def parse_exp_set(file_prefix, file_suffix, file_middle, start, end):
    results = []
    for i in range(start, end):
        gp_file = file_prefix + str(i) + file_middle + 'gp' + file_suffix
        gp_r = parse_gp_file(gp_file)
        egp_file = file_prefix + str(i) + file_middle + 'egp' + file_suffix
        egp_r = parse_gp_file(egp_file)
        if gp_r >= 0 and egp_r >= 0:
            results.append([gp_r, egp_r])
    print('results=')
    for i, r in enumerate(results):
        print(i, ':', r)
    results = np.array(results)
    print('median(results)=', np.median(results, axis=0))
    return results


if __name__ == '__main__':
    #file_prefix = '../data/synthetic_nv5_nt55/sep29_run/prog_'
    #file_suffix = '.out'

    file_prefix = '/scratch/bell/yexiang/xyx_dso/result/inv_nv5_nt58/noisy0.1_2023-01-17/prog_'
    #file_prefix = '/scratch/bell/yexiang/xyx_dso/result/sincosinv_nv4_nt46/2023-01-08/prog_'
    #file_prefix = '/scratch/bell/yexiang/xyx_dso/result/sincos_nv5_nt58/noisy0.1_2023-01-17/prog_'
    file_middle = '.data.metric_neg_mse.'
    file_suffix = '.out'

    start = 0
    end = 11
    parse_exp_set(file_prefix, file_suffix, file_middle, start, end)

## 2023-01-08 run (results grepped Jan 9 10:09 am):
#inv_nv5_nt58
# results=
# 0 : [1.0962793185333461, 1.4987103323027562]
# 1 : [1.0429702029788814, 1.9228102618658647]
# 2 : [1.5026400473176116, 2.047873481867615]
# 3 : [4.255438940465522, 1.7381967943897265]
# 4 : [1.1397989530558206, 27.674967434357324]
# 5 : [55.85011042633208, 1.1836436205514307]
# 6 : [1.4564951660794938, 2.1304259809738553]
# 7 : [2.7141535570942064, 1.3727171656911668]
# 8 : [0.2417803733278765, 0.15078581987708345]
# 9 : [2.590470343143099, 0.9606646448459373]
# 10 : [45.40495581105489, 14.84118817471466]
# median(results)= [1.50264005 1.73819679]

#sincos_nv5_nt55
# results=
# 0 : [30.848975594635387, 15.265993813078026]
# 1 : [2.396947560206185, 1.6218310937150284]
# 2 : [8.442174689991544, 8.270951109273165]
# 3 : [20.866190520719538, 17.842572009812407]
# 4 : [17.624241087072555, 17.908726066523244]
# 5 : [0.15718528747215832, 5.202034045865361]
# 6 : [2.480674821152083, 47.65920998838748]
# 7 : [50.30704566515318, 105.61589323940935]
# 8 : [17.735414187441336, 8.39927824379759]
# median(results)= [17.62424109 15.26599381]

#sincos_nv5_nt58
# results=
# 0 : [14.545172237430394, 8.132044396919705]
# 1 : [121.75223435952654, 2.308723261209515]
# 2 : [0.7970675437882055, 1.4169775849974]
# 3 : [0.5032910395993033, 0.9729245244047758]
# 4 : [69.327546086659, 55.62283129214617]
# 5 : [22.398412831379844, 4.5579000195955155]
# 6 : [46.429923382670474, 20.438387783219582]
# median(results)= [22.39841283  4.55790002]

#sincosinv_nv5_nt55
# results=
# 0 : [22.222817770772252, 3.543801331836859]
# 1 : [15.152845114979065, 0.4237223310984685]
# 2 : [17.193180567258004, 6.329580780453869]
# 3 : [13.944929777156819, 7.941638618629668]
# 4 : [9.064171222411025, 9.381182950327279]
# 5 : [66.66907059663696, 22.311102906483463]
# 6 : [18.191361135034313, 0.5002348148552336]
# 7 : [7.626013231554275, 7.052472546948771]
# 8 : [7.1687987496698184, 1.224064889019253]
# 9 : [0.34188547348910103, 13.431573393445436]
# median(results)= [14.54888745  6.69102666]

#sincosinv_nv5_nt58
# results=
# 0 : [2.6863513694149437, 1.4057917896980023]
# 1 : [26.36345066164784, 1.6205971372441055]
# 2 : [6.142341035063994, 10.625763540872494]
# 3 : [42.99564678716587, 26.72342619661755]
# 4 : [40.631144009150574, 43.59387008839208]
# 5 : [28.413098147166117, 24.945403894370664]
# 6 : [14.098337454523595, 10.298659797184872]
# 7 : [12.023632804070187, 1.5382082762467466]
# 8 : [12.549984045693172, 13.047792822239563]
# median(results)= [14.09833745 10.62576354]


#sincosinv_nv6_nt68
# results=
# 0 : [37.73816854174189, 60.295815320504175]
# 1 : [20.946825826962552, 10.54221072060365]
# 2 : [14.921069662327133, 12.733292712193826]
# 3 : [17.127685623667446, 22.10749128817715]
# 4 : [22.888505312607847, 10.076247608265481]
# 5 : [2.4755849997690262, 26.980906072078163]
# 6 : [19.5155903726222, 20.627952062609467]
# 7 : [22.862002150441498, 6.699128164141095]
# 8 : [25.49083137229342, 1.6729681511482262]
# 9 : [3.8355903399078777, 3.1994309499660503]
# median(results)= [20.2312081  11.63775172]

#sincosinv_nv6_nt610
# results=
# 0 : [11.41868756779811, 1.1555097895383615]
# 1 : [41.39379558120246, 7.684963714374353]
# 2 : [282.42944064025846, 19.378307194128336]
# 3 : [27.69041634490678, 37.96039225342115]
# 4 : [102.13536191344483, 35.641050558511964]
# 5 : [11.31456474343104, 29.98665371363259]
# 6 : [7.008405074538773, 22.606117492796095]
# 7 : [7.283238909815799, 6.4084169497393]
# 8 : [46.69508455238194, 136.28025523073683]
# median(results)= [27.69041634 22.60611749]

#sincosinv_nv4_nt46
# results=
# 0 : [6.285981321559182, 0.6471036345509822]
# 1 : [5.23630575540767, 1.3155591731908]
# 2 : [27.192726631210377, 16.845482397809704]
# 3 : [0.14345367219375266, 0.9966971839440761]
# 4 : [24.487459744809584, 16.410746851851904]
# 5 : [3.621902757758256, 3.4983736158087524]
# 6 : [4.759389844750738, 3.255800052253607]
# 7 : [0.11631919458803858, 1.8290101558363687]
# median(results)= [4.9978478 2.5424051]
